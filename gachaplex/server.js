require('dotenv').config();
const express = require('express');
const session = require('express-session');
const axios = require('axios');
const { AuthorizationCode } = require('simple-oauth2');
const { Octokit } = require('@octokit/rest');
const cors = require('cors');

const app = express();

app.use(cors({
  origin: process.env.FRONTEND_URL,
  credentials: true,
}));
app.use(express.json());

app.use(session({
  secret: process.env.SESSION_SECRET || 'supersecret',
  resave: false,
  saveUninitialized: true,
  cookie: { maxAge: 30 * 60 * 1000 } // 30 minutes
}));

// OAuth2 clients
const githubOAuth = new AuthorizationCode({
  client: {
    id: process.env.GITHUB_CLIENT_ID,
    secret: process.env.GITHUB_CLIENT_SECRET,
  },
  auth: {
    tokenHost: 'https://github.com',
    tokenPath: '/login/oauth/access_token',
    authorizePath: '/login/oauth/authorize',
  },
});

const discordOAuth = new AuthorizationCode({
  client: {
    id: process.env.DISCORD_CLIENT_ID,
    secret: process.env.DISCORD_CLIENT_SECRET,
  },
  auth: {
    tokenHost: 'https://discord.com',
    tokenPath: '/api/oauth2/token',
    authorizePath: '/api/oauth2/authorize',
  },
});

// Redirect to GitHub OAuth login
app.get('/auth/github', (req, res) => {
  const authorizationUri = githubOAuth.authorizeURL({
    redirect_uri: `${process.env.BASE_URL}/callback/github`,
    scope: 'repo user',
    state: Math.random().toString(36).substring(2, 15),
  });
  res.redirect(authorizationUri);
});

// GitHub OAuth callback
app.get('/callback/github', async (req, res) => {
  const { code } = req.query;
  const options = {
    code,
    redirect_uri: `${process.env.BASE_URL}/callback/github`,
  };
  try {
    const accessToken = await githubOAuth.getToken(options);
    req.session.githubToken = accessToken.token.access_token;
    res.redirect(`${process.env.FRONTEND_URL}/generator`);
  } catch (error) {
    console.error('GitHub OAuth error:', error.message);
    res.status(500).send('GitHub authentication failed');
  }
});

// Redirect to Discord OAuth login
app.get('/auth/discord', (req, res) => {
  const authorizationUri = discordOAuth.authorizeURL({
    redirect_uri: `${process.env.BASE_URL}/callback/discord`,
    scope: 'identify',
    state: Math.random().toString(36).substring(2, 15),
  });
  res.redirect(authorizationUri);
});

// Discord OAuth callback
app.get('/callback/discord', async (req, res) => {
  const { code } = req.query;
  const options = {
    code,
    redirect_uri: `${process.env.BASE_URL}/callback/discord`,
  };
  try {
    const accessToken = await discordOAuth.getToken(options);
    req.session.discordToken = accessToken.token.access_token;
    res.redirect(`${process.env.FRONTEND_URL}/generator`);
  } catch (error) {
    console.error('Discord OAuth error:', error.message);
    res.status(500).send('Discord authentication failed');
  }
});

// Generate bot repo for user
app.post('/generate', async (req, res) => {
  if (!req.session.githubToken) {
    return res.status(401).send('GitHub not authenticated');
  }

  const { description, name } = req.body;
  if (!name || name.length < 3) {
    return res.status(400).send('Repo name is required and must be at least 3 characters');
  }

  const octokit = new Octokit({ auth: req.session.githubToken });

  try {
    // Get authenticated user info
    const { data: user } = await octokit.rest.users.getAuthenticated();

    // Create new repo
    const repoName = name.trim().replace(/\s+/g, '-').toLowerCase() + '-' + Date.now();
    const { data: repo } = await octokit.rest.repos.createForAuthenticatedUser({
      name: repoName,
      private: true,
      description: 'Discord bot generated by GachaPlex',
    });

    // Generate files to commit
    const files = generateBotFiles(description);

    // Upload files to repo
    for (const [path, content] of Object.entries(files)) {
      await octokit.rest.repos.createOrUpdateFileContents({
        owner: user.login,
        repo: repoName,
        path,
        message: `Add ${path}`,
        content: Buffer.from(content).toString('base64'),
      });
    }

    // Clear tokens immediately after
    req.session.githubToken = null;
    req.session.discordToken = null;

    res.json({ repoUrl: repo.html_url });
  } catch (error) {
    console.error('Error generating bot:', error);
    res.status(500).send('Failed to generate bot');
  }
});

// Starter bot files generator
function generateBotFiles(description = '') {
  return {
    'index.js': `const { Client, GatewayIntentBits } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once('ready', () => {
  console.log(\`Logged in as \${client.user.tag}!\`);
});

client.on('messageCreate', message => {
  if (message.content === '!ping') {
    message.channel.send('Pong!');
  }
});

client.login(process.env.TOKEN);
`,
    'package.json': JSON.stringify({
      name: 'gachaplex-bot',
      version: '1.0.0',
      main: 'index.js',
      scripts: {
        start: 'node index.js',
      },
      dependencies: {
        'discord.js': '^14.0.0',
      },
    }, null, 2),
    '.env': 'TOKEN=your_bot_token_here\n',
    'README.md': `# GachaPlex Discord Bot

This bot was generated for you by GachaPlex.

## Setup

1. Install dependencies:

\`\`\`
npm install
\`\`\`

2. Add your Discord bot token in the \`.env\` file:

\`\`\`
TOKEN=your_actual_bot_token
\`\`\`

3. Run the bot:

\`\`\`
npm start
\`\`\`

---

## Description

${description || 'Basic Discord bot starter with !ping command.'}
`,
    '.gitignore': `node_modules/
.env
`,
  };
}

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
